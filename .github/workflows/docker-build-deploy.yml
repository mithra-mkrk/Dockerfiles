name: Docker Image Build, Push, and Run

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

jobs:
  docker:
    runs-on: ubuntu-latest

    permissions:
         contents: read   # Needed for actions/checkout@v4
         packages: write  # Crucial for pushing to GitHub Container Registry

    steps:
      

      - name: Checkout code
        uses: actions/checkout@v4 # Use a stable version for checkout

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Recommended for building Docker images

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest # Uses your repo name as image name

  deploy:
    needs: docker # This job depends on the 'docker' job completing successfully
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry (for deploy)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Docker Container
        # This will run the container on the GitHub Actions runner itself.
        # This is primarily for testing within the workflow, not for long-running
        # deployments on external infrastructure.
        run: |
          docker run -d -p 8080:80 ghcr.io/${{ github.repository }}:latest
          echo "Container running on http://localhost:8080 (within the runner)"
          # You might want to add a curl command here to verify if the container is accessible
          # For example:
          # sleep 5 # Give container time to start
          # curl http://localhost:8080