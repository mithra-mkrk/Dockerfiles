Alright, it looks like you've got a couple of things going on here:

1.  **A deleted file named `DockerFile` (with a capital 'F') that was previously tracked by Git.**
2.  **A new, untracked file named `lockerfile` (with a lowercase 'l' and a 'k').**

This typically happens if you've renamed a file using your operating system's file explorer instead of Git commands, or if you deleted one file and created a new one with a slightly different name.

Here's how you can resolve this, depending on what you intended:

---

### Scenario 1: You meant to **rename `DockerFile` to `lockerfile`**

If your intention was simply to change the casing or name of your `DockerFile` to `lockerfile`, Git sees this as a deletion of the old file and the creation of a new, untracked one.

**To tell Git it was a rename:**

```bash
git rm DockerFile        # Stage the deletion of the old file
git add lockerfile       # Stage the addition of the new file
git commit -m "Rename DockerFile to lockerfile"
```

**Explanation:**
* `git rm DockerFile`: This stages the deletion of the file that Git previously knew as `DockerFile`.
* `git add lockerfile`: This stages the new file `lockerfile`.
* When you commit, Git is smart enough to recognize this pattern as a rename and will record it as such in the commit history.

---

### Scenario 2: You **deleted `DockerFile` and `lockerfile` is a completely new, separate file**

If `DockerFile` was supposed to be deleted, and `lockerfile` is a brand new, unrelated file you want to add, then:

**To commit the deletion and add the new file separately:**

```bash
git add -u .             # Stages all modifications (including deletions) of tracked files
git add lockerfile       # Stages the new, untracked file
git commit -m "Delete DockerFile and add new lockerfile"
```

**Explanation:**
* `git add -u .`: The `-u` (or `--update`) option tells Git to stage modifications and deletions for *already tracked* files. The `.` means "in the current directory and its subdirectories." This will stage the deletion of `DockerFile`.
* `git add lockerfile`: This explicitly stages the new `lockerfile`.
* Then, you commit both actions.

---

### Scenario 3: You just want to **discard the changes and go back to the last committed state**

If you didn't mean to delete `DockerFile` or create `lockerfile`, and you just want to revert your local working directory to match what's in your `main` branch:

**To discard all local changes:**

```bash
git restore DockerFile   # This will bring back the deleted DockerFile
git clean -fd            # This will delete the untracked lockerfile
```

**Explanation:**
* `git restore DockerFile`: This command will restore `DockerFile` from your last commit, effectively "undeleting" it.
* `git clean -fd`:
    * `-f` (or `--force`): Required to run `git clean` because it's a potentially destructive command.
    * `-d`: Tells `git clean` to also remove untracked directories, in addition to untracked files.
    * This command will delete `lockerfile` (and any other untracked files/directories) from your working directory.

**Use `git clean -fd` with caution!** It will remove any untracked files and directories, so ensure you don't have anything important that you haven't committed or staged before running it. If you're unsure, run `git clean -n` (dry run) first to see what it *would* remove.

---

Choose the scenario that matches what you intended to do, and execute the corresponding commands in your terminal.